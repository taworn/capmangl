##
## @file Makefile.mingw
## @desc Makefile for MinGW-based tools.
##

#
# Configurations
#

# input options
X64:=0
DEBUG:=0
SHARED:=0

# source, target and output
SOURCE_DIR:=.\src
TARGET_DIR:=.\obj
OUTPUT_DIR:=.\bin

# C/C++ toolchain
CC:=g++
RC:=windres
LD:=g++

# C/C++ toolchain parameters
CFLAGS:=
RFLAGS:=
LFLAGS:=

# CPU flags
ifneq ($(if $(X64),$(X64),0),0)
# 64-bit
TARGET_DIR:=$(TARGET_DIR)\x64
OUTPUT_DIR:=$(OUTPUT_DIR)\x64
X64_TAG:=x64
X64_CFLAGS:=
X64_RFLAGS:=
X64_LFLAGS:=
else
# 32-bit
TARGET_DIR:=$(TARGET_DIR)\x86
OUTPUT_DIR:=$(OUTPUT_DIR)\x86
X64_TAG:=x86
X64_CFLAGS:=
X64_RFLAGS:=
X64_LFLAGS:=
endif

# debug flags
ifneq ($(if $(DEBUG),$(DEBUG),0),0)
# debug build
TARGET_DIR:=$(TARGET_DIR)-debug
DEBUG_TAG:=d
DEBUG_CFLAGS:=-DDEBUG=1 -D_DEBUG=1 -g
DEBUG_RFLAGS:=-DDEBUG=1 -D_DEBUG=1
DEBUG_LFLAGS:=-g
else
# release build
TARGET_DIR:=$(TARGET_DIR)-release
DEBUG_TAG:=
DEBUG_CFLAGS:=-O2 -DNDEBUG
DEBUG_RFLAGS:=
DEBUG_LFLAGS:=
endif

# shared flags
ifneq ($(if $(SHARED),$(SHARED),0),0)
# shared build
TARGET_DIR:=$(TARGET_DIR)-shared
BOOST_TAG:=.dll
SHARED_TAG:=
SHARED_CFLAGS:=
SHARED_RFLAGS:=
SHARED_LFLAGS:=
else
# static build
TARGET_DIR:=$(TARGET_DIR)-static
BOOST_TAG:=
SHARED_TAG:=s
SHARED_CFLAGS:=-static
SHARED_RFLAGS:=
SHARED_LFLAGS:=-static
endif

# modules
MODULES:=\
	$(TARGET_DIR)\winmain.o \
	$(TARGET_DIR)\scenes\win_scene.o \
	$(TARGET_DIR)\scenes\gameover_scene.o \
	$(TARGET_DIR)\scenes\play_scene.o \
	$(TARGET_DIR)\scenes\next_stage_scene.o \
	$(TARGET_DIR)\scenes\stage_scene.o \
	$(TARGET_DIR)\scenes\title_scene.o \
	$(TARGET_DIR)\scenes\scene.o \
	$(TARGET_DIR)\game\gamedata.o \
	$(TARGET_DIR)\game\pacman.o \
	$(TARGET_DIR)\game\divo.o \
	$(TARGET_DIR)\game\movable.o \
	$(TARGET_DIR)\game\map.o \
	$(TARGET_DIR)\game.o \
	$(TARGET_DIR)\animation.o \
	$(TARGET_DIR)\sprite.o \
	$(TARGET_DIR)\texture.o \
	$(TARGET_DIR)\pngimage.o \
	$(TARGET_DIR)\font.o \
	$(TARGET_DIR)\shaders\shader.o \
	$(TARGET_DIR)\opengl.o

# headers
HEADERS:=\
	$(TARGET_DIR)\scenes\win_scene.hxx \
	$(TARGET_DIR)\scenes\gameover_scene.hxx \
	$(TARGET_DIR)\scenes\play_scene.hxx \
	$(TARGET_DIR)\scenes\next_stage_scene.hxx \
	$(TARGET_DIR)\scenes\stage_scene.hxx \
	$(TARGET_DIR)\scenes\title_scene.hxx \
	$(TARGET_DIR)\scenes\scene.hxx \
	$(TARGET_DIR)\game\gamedata.hxx \
	$(TARGET_DIR)\game\pacman.hxx \
	$(TARGET_DIR)\game\divo.hxx \
	$(TARGET_DIR)\game\movable.hxx \
	$(TARGET_DIR)\game\map.hxx \
	$(TARGET_DIR)\game\common.hxx \
	$(TARGET_DIR)\game.hxx \
	$(TARGET_DIR)\animation.hxx \
	$(TARGET_DIR)\sprite.hxx \
	$(TARGET_DIR)\texture.hxx \
	$(TARGET_DIR)\pngimage.hxx \
	$(TARGET_DIR)\font.hxx \
	$(TARGET_DIR)\shaders\text_shader.hxx \
	$(TARGET_DIR)\shaders\normal_shader.hxx \
	$(TARGET_DIR)\shaders\shader.hxx \
	$(TARGET_DIR)\opengl.hxx

# directories
INCLUDE_DIRS:=-I$(BOOST_INCLUDE) -I.\glew\include -I.\glm -I.\freetype\include -I.\libpng -I.\zlib
LIBRARY_DIRS:=-L$(BOOST_LIB) -L.\glew\lib\$(X64_TAG) -L.\freetype\lib\$(X64_TAG) -L.\libpng\$(X64_TAG) -L.\zlib\$(X64_TAG)

# libraries
LIBRARIES:=-lboost_log-mt$(BOOST_TAG) -lboost_thread-mt$(BOOST_TAG) -lboost_system-mt$(BOOST_TAG) -lpng -lz -lfreetype -lglew32s -lopengl32 -lshell32 -luser32 -lgdi32 -lkernel32

# executable
OUTPUT:=capmanglmingw$(SHARED_TAG)$(DEBUG_TAG).exe

# common flags
ifneq ($(if $(SHARED),$(SHARED),0),0)
COMMON_DEFINES:=-DBOOST_LOG_DYN_LINK -DGLEW_STATIC -DUNICODE=1 -D_UNICODE=1
else
COMMON_DEFINES:=-DGLEW_STATIC -DUNICODE=1 -D_UNICODE=1
endif
COMMON_CFLAGS:=-Wall $(INCLUDE_DIRS) $(COMMON_DEFINES) $(X64_CFLAGS) $(DEBUG_CFLAGS) $(SHARED_CFLAGS)
COMMON_RFLAGS:=$(X64_RFLAGS) $(DEBUG_RFLAGS) $(SHARED_RFLAGS)
COMMON_LFLAGS:=-Wall $(LIBRARY_DIRS) $(X64_LFLAGS) $(DEBUG_LFLAGS) $(SHARED_LFLAGS)


#
# Rules
#

all: prepare $(OUTPUT_DIR)\$(OUTPUT)

prepare:
	if not exist $(TARGET_DIR) mkdir 2>NUL $(TARGET_DIR)
	if not exist $(TARGET_DIR)\shaders mkdir 2>NUL $(TARGET_DIR)\shaders
	if not exist $(TARGET_DIR)\scenes mkdir 2>NUL $(TARGET_DIR)\scenes
	if not exist $(TARGET_DIR)\game mkdir 2>NUL $(TARGET_DIR)\game
	if not exist $(OUTPUT_DIR) mkdir 2>NUL $(OUTPUT_DIR)
ifneq ($(if $(SHARED),$(SHARED),0),0)
	copy /y $(BOOST_LIB)\libboost_log-mt.dll $(OUTPUT_DIR)
	copy /y $(BOOST_LIB)\libboost_filesystem-mt.dll $(OUTPUT_DIR)
	copy /y $(BOOST_LIB)\libboost_thread-mt.dll $(OUTPUT_DIR)
	copy /y $(BOOST_LIB)\libboost_system-mt.dll $(OUTPUT_DIR)
endif

check: all
	$(OUTPUT_DIR)\$(OUTPUT)

clean:
	if exist $(TARGET_DIR) del /q 2>NUL $(TARGET_DIR)\*.o
	if exist $(TARGET_DIR)\shaders del /q 2>NUL $(TARGET_DIR)\shaders\*.o
	if exist $(TARGET_DIR)\scenes del /q 2>NUL $(TARGET_DIR)\scenes\*.o
	if exist $(TARGET_DIR)\game del /q 2>NUL $(TARGET_DIR)\game\*.o

clean-all: clean
	if exist $(OUTPUT_DIR) del /q 2>NUL $(OUTPUT_DIR)\$(OUTPUT)
ifneq ($(if $(SHARED),$(SHARED),0),0)
	if exist $(OUTPUT_DIR) del /q 2>NUL $(OUTPUT_DIR)\libboost_log-mt.dll
	if exist $(OUTPUT_DIR) del /q 2>NUL $(OUTPUT_DIR)\libboost_filesystem-mt.dll
	if exist $(OUTPUT_DIR) del /q 2>NUL $(OUTPUT_DIR)\libboost_thread-mt.dll
	if exist $(OUTPUT_DIR) del /q 2>NUL $(OUTPUT_DIR)\libboost_system-mt.dll
endif

$(OUTPUT_DIR)\$(OUTPUT): $(MODULES)
	$(LD) $(LFLAGS) $(COMMON_LFLAGS) -o $@ $+ $(LIBRARIES)

$(TARGET_DIR)\shaders\\%.o: $(SOURCE_DIR)\shaders\\%.cxx
	$(CC) $(CFLAGS) $(COMMON_CFLAGS) -o $@ -c $<

$(TARGET_DIR)\scenes\\%.o: $(SOURCE_DIR)\scenes\\%.cxx
	$(CC) $(CFLAGS) $(COMMON_CFLAGS) -o $@ -c $<

$(TARGET_DIR)\game\\%.o: $(SOURCE_DIR)\game\\%.cxx
	$(CC) $(CFLAGS) $(COMMON_CFLAGS) -o $@ -c $<

$(TARGET_DIR)\\%.o: $(SOURCE_DIR)\\%.cxx
	$(CC) $(CFLAGS) $(COMMON_CFLAGS) -o $@ -c $<

$(TARGET_DIR)\\%.o: $(SOURCE_DIR)\\%.c
	$(CC) $(CFLAGS) $(COMMON_CFLAGS) -o $@ -c $<

$(TARGET_DIR)\\%.o: $(SOURCE_DIR)\\%.rc
	$(RC) $(RFLAGS) $(COMMON_RFLAGS) -o $@ -i $<

